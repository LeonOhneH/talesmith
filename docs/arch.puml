@startuml ComponentDiagram
'======================
'   Dom√§nenklassen
'======================
class Game {
    - name: String
    - roomTemplates: List<RoomTemplate>
    - enemyTemplates: List<EnemyTemplate>
    - player: Player
    - currentRoom: Room

    + Game()
    + Game(name: String, roomTemplates: List<RoomTemplate>, enemyTemplates: List<EnemyTemplate>)
    + start(): void
    + gameLoop(): int
    + generateNewRoom(): void
    + <<getters/setters>>
}

class Room {
    - name: String
    - enemies: List<Enemy>
    - cleared: boolean

    + Room(name: String, enemies: List<Enemy>)
    + checkCleared(): void
    + fight(player: Player, currentEnemy: Enemy): void
    + toString(): String
    + <<getters/setters>>
}

abstract class Creature {
    - name: String
    - hp: int
    - ap: int
    - agility: int

    + Creature(name: String, hp: int, ap: int, agility: int)
    + isDead(): boolean
    + isAlive(): boolean
    + attack(c: Creature): void
    + toString(): String
    + <<getters/setters>>
}

class Player {
    - name: String
    - hp: int
    - ap: int
    - agility: int
    - inventory: List<Item>

    + Player(name: String, hp: int, ap: int, agility: int)

}


class Enemy {
    + Enemy(name: String, hp: int, ap: int, agility: int)
}

abstract class Item {

}

class Weapon {
    - type: WeaponTypeE
    - damage: int

    + Weapon(name: String, description: String, type: WeaponTypeE, damage: int)
    + attack(c: Creature): void
    + toString(): String
    + <<getters/setters>>
}

class Consumeable {

}

'======================
'   Template-Klassen
'======================

together {
    class RoomTemplate {
        - name: String
        - possibleEnemies: List<EnemyTemplate>
        - possibleDrops: Map<ItemTemplate, float>

        + RoomTemplate()
        + RoomTemplate(name: String)
        + RoomTemplate(name: String, possibleEnemies: List<EnemyTemplate>)
        + getRandomEnemyTemplate(): EnemyTemplate
        + <<getters/setters>>
    }

    class EnemyTemplate {
        - name: String
        - hp: int
        - ap: int
        - agility: int
        - possibleDrops: Map<ItemTemplate, float>

        + EnemyTemplate()
        + EnemyTemplate(name: String, hp: int, ap: int, agility: int)
        + <<getters/setters>>
    }

    abstract class ItemTemplate {
        - name: String
        - description: String

        + ItemTemplate()
        + ItemTemplate(name: String, description: String)
        + <<getters/setters>>
    }
}

class WeaponTemplate {
    - type: WeaponTypeE
    - damage: int

    + WeaponTemplate()
    + WeaponTemplate(name: String, description: String, type: WeaponTypeE, damage: int)
    + <<getters/setters>>
}

enum WeaponTypeE {

}

class ConsumeableTemplate {

}


'======================
'   Builder-Klassen
'======================
class RoomBuilder {
    - template: RoomTemplate
    - enemies: List<Enemy>

    + RoomBuilder()
    + RoomBuilder(template: RoomTemplate, enemies: List<Enemy>)
    + withTemplate(template: RoomTemplate, numberOfEnemies: int): RoomBuilder
    + addEnemy(enemy: Enemy): RoomBuilder
    + build(): Room
}

class EnemyBuilder {
    - name: String
    - hp: int
    - ap: int
    - agility: int

    + EnemyBuilder()
    + EnemyBuilder(template: EnemyTemplate)
    + withTemplate(template: EnemyTemplate): EnemyBuilder
    + withName(name: String): EnemyBuilder
    + withHp(hp: int): EnemyBuilder
    + withAp(ap: int): EnemyBuilder
    + withAgility(agility: int): EnemyBuilder
    + build(): Enemy
}

'======================
'   Beziehungen
'======================
Game *-- Room
Game *-- Player
Game *-- RoomTemplate
RoomTemplate *-- EnemyTemplate
RoomTemplate *-- ItemTemplate

ItemTemplate <|-- WeaponTemplate
ItemTemplate <|-- ConsumeableTemplate

Game ..> RoomBuilder     : uses
Game ..> EnemyBuilder    : uses

Room o-- Enemy
Room *-- Item
Creature *-- Item

Item <|-- Weapon
Item <|-- Consumeable

Weapon --> WeaponTypeE
WeaponTemplate --> WeaponTypeE

Player --|> Creature
Enemy  --|> Creature

RoomBuilder o-- Room
EnemyBuilder o-- Enemy
@enduml
